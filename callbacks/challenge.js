/* 
*ðŸ“² XMLHttpRequest es un objeto de JS que permite hacer peticiones hacia servicios en la nube(URLs o APIs).
*/

// * Llamado al XMLHttpRequest
const XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest;

// * Se escribe API en mayusculas porque sera un valor que no cambiara
const API = 'https://api.escuelajs.co/api/v1';

/*
 # Funcion que permitira recibir la url de la api y el callback que sera una funcion anonima,
 # para recibir la solicitud que nos este entregando el llamado a esta api
*/
function fetchData(urlAPI, callBack) {
  let xHttp = new XMLHttpRequest();

  // # open â†’ Prepara la peticiÃ³n para ser enviada tomando tres parÃ¡metros: prÃ³tocolo, url, asÃ­ncrono (true).
  xHttp.open('GET', urlAPI, true);

  /* 
  #ðŸ“­ Los cÃ³digos de estados del servidor:

  * El cÃ³digo de estado(status codes) sirve para describir el estado de la peticiÃ³n hecha al servidor.

  * 1xx â†’ Indican que la peticiÃ³n fue recibida por el servidor, pero estÃ¡ siendo procesada por el servidor.
  * 2xx â†’ Indican que la peticiÃ³n fue recibida, aceptada y procesada correctamente.
  * 3xx â†’ Indican que hay que tomar acciones adicionales para completar la solicitud.
  * 4xx â†’ Indican errores del lado del cliente que hizo mal una solicitud.
  * 5xx â†’ Indican errores del servidor.Suelen aparecer cuando existe un fallo en la ejecuciÃ³n en el servidor.

  #ðŸ“ª Existen 5 estados en un llamado XMLHttpRequest:
  
  * 0 â†’ Se ha inicializado.
  * 1 â†’ Loading (cargando).
  * 2 â†’ Se ha cargado.
  * 3 â†’ Procesamiento si existe alguna descarga.
  * 4 â†’ Completado.
   
  #ðŸ“¬ CaracterÃ­sticas del protocolo http:
.
  * Verbos: indican acciones que estÃ¡n asociadas a peticiones y recursos, es decir,
  * sirven para la manipulaciÃ³n de recursos cliente/servidor. Los Verbos http son:

  * GET â†’ Solicita un recurso.
  * HEAD â†’ Solicita un recurso pero sin retornar informaciÃ³n, la estructura de esta peticiÃ³n es igual que get tanto en su headers como estatus. Es Ãºtil cuando vamos a utilizar API, para comprobar si lo que vamos a enviar esta correcto y puede ser procesado.
  * POST â†’ Sirve para la creaciÃ³n de recursos en el servidor.
  * PUT â†’ Actualiza por completo un recurso, reemplaza todas las representaciones actuales del recurso de destino con la carga Ãºtil de la peticiÃ³n.
  * PATCH â†’ Actualiza parcialmente un recurso.
  * DELETE â†’ Elimina un recurso.
  */

  // # onreadystatechange â†’ Un eventHandler que es llamado cuando la propiedad readyState cambia.
  xHttp.onreadystatechange = event => {
    // # readyState â†’ Retorna el estado de la peticiÃ³n. 
    // # status â†’ Retorna el estado de la respuesta de la peticiÃ³n. (200,400,500, etc.)
    if (xHttp.readyState === 4) {
      if (xHttp.status === 200) {
        callBack(null, JSON.parse(xHttp.responseText));
      } else {
        const error = new Error(`Error ${xHttp.status} con la peticion a la url: ${urlAPI}`);
        return callBack(error, null);
      }
    }
  };

  // # send() â†’ EnvÃ­a la peticiÃ³n
  xHttp.send();
}

/* 
* el signo: ?, es un Optional chaining, permite leer el valor de una propiedad ubicada dentro de una cadena 
* de objetos conectados sin tener que validar expresamente que cada referencia en la cadena sea vÃ¡lida.
* Devolveria undefined en caso de que el valor no exista aun dentro del objeto
*/
// # Obtener todos los datos de un producto
// * Obtenemos todos los productos
fetchData(`${API}/products`, (error1, data1) => {
  if (error1) return console.error(error1);
  // * indicamos en la URL el id del producto en especifico a obtener
  fetchData(`${API}/products/${data1[0]?.id}`, (error2, data2) => {
    if (error2) return console.error(error2);
    // * indicamos en la URL el id de la categoria a la que pertenece el producto
    fetchData(`${API}/categories/${data2?.category?.id}`, (error3, data3) => {
      if (error3) return console.error(error3);

      // * Obtenemos toda la informacion del articulo que tenga la posicion 1(0)
      console.log(data1[0]);

      // * Obtenemos solo el nombre del producto
      console.log(data2?.title);

      // * Obtenemos el nombre de la categoria a la que pertenece el producto
      console.log(data3?.name);
    });
  });
});