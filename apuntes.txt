✍🏾 Conceptos importantes para entender el asincronismo:

• 🧵 Thread: Thread para Javascript permite realizar programación multihilos en este entorno.
 En realidad, simula la creación y ejecución de hilos, pero para el desarrollador es lo mismo. 
 Ésto simplifica muchísimo la creación de aplicaciones Javascript.

• 🚫 Bloqueante: Una llamada u operación bloqueante no devuelve el control a la aplicación hasta que
 se ha completado. Por tanto el thread queda bloqueado en estado de espera.

• 🚿 No bloqueante: Una tarea no bloqueante se devuelve inmediatamente con independencia del resultado.
Si se completó, devuelve los datos. Si no, un error.

• 🎞️ Síncrono: Las tareas se ejecutan de forma secuencial, se debe esperar a que se complete para 
continuar con la siguiente tarea.

• 🚦 Asíncrono: Las tareas pueden ser realizadas más tarde, lo que hace posible que una respuesta sea
 procesada en diferido. La finalización de la operación I/O (entrada/salida) se señaliza más tarde,
  mediante un mecanismo específico como por ejemplo un callback, una promesa o un evento, lo que 
  hace posible que la respuesta sea procesada en diferido.

• 🛤️ Paralelismo: El paralelismo es la ejecución simultánea de dos o más tareas. Algunas tareas
 se pueden dividir en partes más pequeñas que pueden ser resueltas simultáneamente.

• 🎮 Concurrencia: La concurrencia es la capacidad de un algoritmo o programa para ejecutar más de
 una tarea a la vez. El concepto es similar al procesamiento paralelo, pero con la posibilidad de 
 que muchos trabajos independientes hagan diferentes cosas a la vez en lugar de ejecutar el mismo trabajo.

• 🌀 Eventloop o Loop de eventos: El bucle de eventos es un patrón de diseño que espera y distribuye
 eventos o mensajes en un programa.

 📝 Formas de manejar la asincronía en JavaScript:

• 📩 Callbacks: Una función que se pasa como argumento de otra función y que será invocada.
• 🫱🏼‍🫲🏾 Promesas: (implementado en ES6) Una promesa es una función no-bloqueante y asíncrona la 
cual puede retornar un valor ahora, en el futuro o nunca.
• 🛣️ Async / Await: (implementado en ES2017) Permite estructurar una función asincrónica sin bloqueo 
de una manera similar a una función sincrónica ordinaria.


📌 En JavaScript casi todas las operaciones de I/O (Entrada y Salida) no se bloquean. A esto se le
 conoce como asíncronismo. Lo único que no es procesado antes de que termine la operación son los
 callbacks, ya que éstos están amarrados a una operación y esperan a que sea finalizada para poder
 ejecutarse.

⏳ El asincronismo es una manera de aprovechar el tiempo y los recursos de la aplicación, ejecutando 
tareas y procesos mientras otros son resueltos en background (como la llegada de la información de
 una API), para posteriormente continuar con las tareas que requerían esa información que no tenías 
 de manera instantánea.

 🗄️ Javascript se organiza usando las siguientes estructuras de datos:

• 🗃️ Memory Heap: Región de memoria libre de gran tamaño, dedicada al alojamiento dinámico de objetos 
(asignado a un montículo). Es compartida por todo el programa y controlada por un recolector de basura 
que se encarga de liberar aquello que no se necesita, es decir de forma desorganizada se guarda
 información de las variables y del scope.

• 🔋 Call Stack (pila LIFO: Last-in, First-out): Apila de forma organizada las instrucciones de 
nuestro programa. La pila de llamadas, se encarga de albergar las instrucciones que deben ejecutarse.
Nos indica en que punto del programa estamos, por donde vamos.

• 🚗🚕🚙 Task Queue (cola): Cada vez que nuestro programa recibe una notificación del exterior o de
otro contexto distinto al de la aplicación, el mensaje se inserta en una cola de mensajes pendientes
y se registra su callback correspondiente. El stack debe estar vacío para que esto suceda.

• 🚗🚕 Micro Task Queue: Aquí se agregan las promesas. Esta Queue es la que tiene mayor prioridad.